@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewData["Title"] = "Lecturer";
}

<section class="section profile">
    <div class="row">
        <div class="col-sm-8 offset-sm-2">
            <div class="pagetitle">
                <h1>@ViewData["Title"]</h1>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-8 offset-sm-2">

            <div class="row">
                @*<div class="col-xl-4">

                    <div class="card">
                    <div class="card-body profile-card pt-4 d-flex flex-column align-items-center">

                    <img src="image/approved/@Model.info.Student.ImageUrl" alt="Profile" class="rounded-circle">
                    </div>
                    </div>

                    </div>*@

                <div class="col-xl-8 offset-xl-2">
                    <div class="card">
                        <div class="card-body pt-3">

                            <ul class="nav nav-tabs nav-tabs-bordered">

                                <li class="nav-item">
                                    <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#profile-overview">Overview</button>
                                </li>

                                <li class="nav-item">
                                    <button class="nav-link" data-bs-toggle="tab" data-bs-target="#students">Students</button>
                                </li>

                                <li class="nav-item">
                                    <button class="nav-link" data-bs-toggle="tab" data-bs-target="#lectures">Lectures</button>
                                </li>

                            </ul>

                            <div class="tab-content pt-2">
                                <partial name="partials/_details" />
                                <partial name="partials/_students" />
                                <partial name="partials/_lecture" />
                            </div>

                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</section>
<partial name="_status" />
@section Scripts{
<script>
                const startLecture = async ()=>{
                    const WeekNo = getEl("#weekNo").value;
                    const LectureDate = getEl("#lectureDate").value;
                    const StartTime = getEl("#startTime").value;
                    const EndTime = getEl("#endTime").value;

                    const res = await fetch("lecturer/InitLecture", {
                        method: "POST",
                        headers : {
                            "Content-Type": "Application/json"
                        },
                        body: JSON.stringify({WeekNo, LectureDate, StartTime, EndTime})
                    })
                    const data = await res.json();

                    if(data.status){
                        let lecBody = getEl("#lectureBody")
                        let tr = document.createElement('tr');

                        let wn = document.createElement('td');
                        let wnt = document.createTextNode(WeekNo)
                        wn.appendChild(wnt)

                        let ld = document.createElement('td');
                        let ldt = document.createTextNode(LectureDate)
                        ld.appendChild(ldt)

                        let st = document.createElement('td');
                        let stt = document.createTextNode(StartTime)
                        st.appendChild(stt)

                        let et = document.createElement('td');
                        let ett = document.createTextNode(EndTime)
                        et.appendChild(ett)

                        tr.appendChild(wn)
                        tr.appendChild(ld)
                        tr.appendChild(st)
                        tr.appendChild(et)

                        lecBody.appendChild(tr);
                    }

                    getEl("#requestMsg").innerText = data.msg
                    getEl("#requestStatus").click();
                }

                const getEl = (arg)=>{
                    return document.querySelector(arg);
                }

                const startCamera = ()=>{

                    // Access the camera stream
                    async function onScanSuccess(decodedText, decodedResult) {
	                // handle the scanned code as you like, for example:
	                    //alert(`Code matched = ${decodedText}`, decodedResult);
                        var data = await fetch(decodedText);
                        data = await data.json();

                        let parent = getEl("#requestMsg");
                        while (parent.firstChild) {
                            parent.removeChild(parent.firstChild);
                        }
                        getEl("#requestMsg").innerHTML = data.msg;
                        getEl("#statusTitle").innerText = "Information";
                        getEl("#requestStatus").click();

	                }

	                function onScanFailure(error) {
	                // handle scan failure, usually better to ignore and keep scanning.
	                // for example:
	                    alert(`Code scan error = ${error}`);
	                }

	                let html5QrcodeScanner = new Html5QrcodeScanner(
	                    "reader",
	                    { fps: 10, qrbox: {width: 250, height: 250} },
	                    /* verbose= */ false);
	                    html5QrcodeScanner.render(onScanSuccess);
	                    //html5QrcodeScanner.render(onScanSuccess, onScanFailure);
                }

                const addStudent = ()=>{
                    //<video id="videoElement" width="400" height="300"></video>

                    //let vid = document.createElement("video")
                    //vid.id = "videoElement";
                    //vid.width = "400"
                    //vid.height = "300"

                    let el = document.createElement("div")
                    el.id = "reader";
                    el.width = "400";

                    let parent = getEl("#requestMsg");
                    while (parent.firstChild) {
                        parent.removeChild(parent.firstChild);
                    }
                    getEl("#requestMsg").appendChild(el);

                    startCamera()
                    getEl("#statusTitle").innerText = "Add Student To Current Lecture";
                    getEl("#requestStatus").click();

                }

                window.onload = ()=>{
                    getEl("#initLecture").addEventListener('click', startLecture);
                    getEl("#addStudentToLecture").addEventListener('click', addStudent)
                }
</script>
}
